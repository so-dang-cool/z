plugins {
    id 'java-library'
    id 'jacoco'
    id 'com.diffplug.spotless' version '5.12.5'
    id 'pmd'
    id 'info.solidsoft.pitest' version '1.9.0'

    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'

    // For: ./gradlew --console plain jshell
    id 'com.github.mrsarm.jshell.plugin' version '1.2.0'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.named('jacocoTestCoverageVerification') {
    dependsOn test
}

tasks.named('build') {
    dependsOn jacocoTestCoverageVerification
}

javadoc {
    options.addBooleanOption('html5', true)

    // Ignore warnings, especially for missing @param/@return, which is overkill.
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            limit {
                // 100% minimum test coverage.
                //
                // My greatest opponent is myself. If I can discover what my weaknesses are,
                // then I will be an even stronger fighter than I already am. -- Piccolo
                minimum = 1.00
            }
        }
    }
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.required = true
        csv.destination file("${buildDir}/reports/jacoco/report.csv")
    }
}

pitest {
    junit5PluginVersion = '1.0.0'
    targetClasses = ['so.dang.cool.*']
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }

    java {
        toggleOffOn('fmt:off', 'fmt:on')

        importOrder()
        removeUnusedImports()
        prettier(['prettier': '2.3.0', 'prettier-plugin-java': '1.1.1']).config(['parser': 'java', 'tabWidth': 4])
    }
}

tasks.register('fmt') {
    dependsOn 'spotlessApply'
}

pmdTest {
    rulesMinimumPriority = 2
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'so.dang.cool'
            artifactId = 'z'
            version = '3.0.0-NEXT'

            from components.java

            pom {
                name = 'Z'
                description = 'Function combinators'
                url = 'https://github.com/hiljusti/z'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/hiljusti/z/blob/HEAD/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'hiljusti'
                        name = 'J.R. Hill'
                        email = 'hiljusti@pm.me'
                        url = 'https://so.dang.cool'
                    }
                }

                contributors {
                    contributor {
                        name = 'Michael Ross'
                        url = 'https://github.com/madmikeross'
                        email = 'michael.s.ross@protonmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/hiljusti/z'
                    connection = 'scm:git:git://github.com/hiljusti/z.git'
                    developerConnection = 'scm:git:git://github.com/hiljusti/z.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('repo')
        }
    }
}

signing {
    sign publishing.publications.maven
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
            snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))
        }
    }
}
